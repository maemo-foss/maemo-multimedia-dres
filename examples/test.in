# How it (might) work:
#   Targets are in the key-store. They have a 'last-updated' timestamp and
#   an optional action list that is the concatenated output of function
#   calls to update the target. The 'last-updated' timestamp changes in case
#   the value of the key changes. As a consequence if a key is updated with
#   the identical value it already has the timestamp will not change.
#
#   For requests, like 'audio_playback', the necessary required values are set
#   first. In case of 'audio_playback' thsi would mean:
#      - audio_playback_request = MP3
#      - sleeping_request = wakeup
#      - cpu_frequency = maximum
#   Next the 'make' is requested for the correct target, in our example this
#   would be the audio_playback target (i.e. the 'make audio_target')
#   In the example this would result a combination of sleeping_state,
#   cpu_frequency update if needed. Next the 'audio_playback' request
#   will be called will be invoked. If the 'make' succeeds, i.e. non of the 
#   called 'update' or 'request' function failed, the necessary actions can
#   be collected from the changed targets.
#
#   For signals, like 'headset is connected', the relevant key is updated
#   followed by a 'make all'. If the operation succeeds the actions, held by
#   the changed keys, are performed.
#
#


foo: $bar $foobar


test1: bar $foobar

bar: $foobar
	prolog(done)

test: $depend1 $depend2 $dresvar1 $dresvar2
	dres(test1, &test1 = a1, &test2 = b2, &test3 = c3)


vartest: $depend1 $depend2
	 $result = call(test1, &test1 = foo, &test2 = bar, &test3 = foobar)

